module Syntax where

open import Prelude.Natural
open import Prelude.Finite
open import Prelude.List

mutual
  data Expr (n : Nat) : Set where
    ╬й_ : Fin n Рєњ Expr n
    `_ : Val n Рєњ Expr n
    _[_] : Cont n Рєњ Expr n Рєњ Expr n

  data Cont (n : Nat) : Set where
    -Рђб_ : Expr n Рєњ Cont n
    ¤ђРѓЂ- : Cont n
    ¤ђРѓѓ- : Cont n
    S- : Cont n
    ­ЮћБ- : Cont n

  data Val (n : Nat) : Set where
    num : Nat Рєњ Val n
    nat unit ax : Val n
    РЪе_,_РЪЕ : Expr n Рєњ Expr n Рєњ Val n
    кЏ_ : Expr (su n) Рєњ Val n

Stack : Nat Рєњ Set
Stack n = List (Cont n)

mutual
  wkрхЅ
    : Рѕђ {n}
    Рєњ Expr n
    Рєњ Expr (su n)
  wkрхЅ (╬й i) = ╬й (su i)
  wkрхЅ (` M) = ` (wkрхЏ M)
  wkрхЅ (K [ E ]) = wkрхЈ K [ wkрхЅ E ]

  wkрхЏ
    : Рѕђ {n}
    Рєњ Val n
    Рєњ Val (su n)
  wkрхЏ (num n) = num n
  wkрхЏ ax = ax
  wkрхЏ unit = unit
  wkрхЏ nat = nat
  wkрхЏ РЪе E , F РЪЕ = РЪе wkрхЅ E , wkрхЅ F РЪЕ
  wkрхЏ (кЏ E) = кЏ (wkрхЅ E)

  wkрхЈ
    : Рѕђ {n}
    Рєњ Cont n
    Рєњ Cont (su n)
  wkрхЈ (-Рђб E) = -Рђб (wkрхЅ E)
  wkрхЈ ¤ђРѓЂ- = ¤ђРѓЂ-
  wkрхЈ ¤ђРѓѓ- = ¤ђРѓѓ-
  wkрхЈ S- = S-
  wkрхЈ ­ЮћБ- = ­ЮћБ-

  wk╦б
    : Рѕђ {n}
    Рєњ Stack n
    Рєњ Stack (su n)
  wk╦б =
    List.map wkрхЈ

mutual
  _/рхЅ_
    : Рѕђ {n}
    Рєњ Expr (su n)
    Рєњ Expr n
    Рєњ Expr n
  (╬й ze) /рхЅ E = E
  (╬й (su x)) /рхЅ _ = ╬й x
  (` M) /рхЅ E = ` (M /рхЏ E)
  (K [ F ]) /рхЅ E = (K /рхЈ E) [ F /рхЅ E ]

  _/рхЏ_
    : Рѕђ {n}
    Рєњ Val (su n)
    Рєњ Expr n
    Рєњ Val n
  num x /рхЏ _ = num x
  ax /рхЏ _ = ax
  unit /рхЏ _ = nat
  nat /рхЏ _ = nat
  РЪе F , G РЪЕ /рхЏ E = РЪе F /рхЅ E , G /рхЅ E РЪЕ
  (кЏ m) /рхЏ E = кЏ (m /рхЅ wkрхЅ E)

  _/рхЈ_
    : Рѕђ {n}
    Рєњ Cont (su n)
    Рєњ Expr n
    Рєњ Cont n
  (-Рђб F) /рхЈ E = -Рђб (F /рхЅ E)
  ¤ђРѓЂ- /рхЈ _ = ¤ђРѓЂ-
  ¤ђРѓѓ- /рхЈ _ = ¤ђРѓѓ-
  S- /рхЈ _ = S-
  ­ЮћБ- /рхЈ _ = ­ЮћБ-

  _/╦б_
    : Рѕђ {n}
    Рєњ Stack (su n)
    Рєњ Expr n
    Рєњ Stack n
  S /╦б E =
    List.map (_/рхЈ E) S

